Setting the **BOOT0** pin to `1` (VCC) and **BOOT1** to `0` (GND) puts the STM32 into **System Memory boot mode**. Here’s how this worked to get your computer to recognize the device:

1. **Boot Mode Selection on STM32**: 
   - The STM32 microcontroller has several boot modes that determine what code it will execute on startup. The **BOOT0** and **BOOT1** pins control these modes:
      - **BOOT0 = 0, BOOT1 = 0**: Executes user application code from flash memory (normal operation).
      - **BOOT0 = 1, BOOT1 = 0**: Executes code from system memory (DFU mode).
      - **BOOT0 = 0, BOOT1 = 1**: Boots from embedded SRAM, which is rarely used.
   - Setting **BOOT0 to 1** and **BOOT1 to 0** tells the microcontroller to boot into **System Memory**. This is where the **DFU (Device Firmware Upgrade)** bootloader resides, allowing the device to be accessed over USB without any user-loaded firmware.

2. **DFU Mode (Device Firmware Upgrade)**:
   - STM32 microcontrollers have a built-in DFU bootloader in the system memory, which allows the board to communicate with a computer over USB and appear as a **DFU device**. This built-in bootloader is a factory-provided, minimal code that supports flashing new firmware onto the chip.
   - By using DFU mode, you bypass any issues with the firmware you might have previously loaded (or if no firmware is loaded), since the board doesn’t rely on flash memory but rather on its internal bootloader.

3. **Why It Fixed Recognition**:
   - If there was corrupted or incompatible firmware on the board, it could have caused USB issues or prevented the computer from detecting it properly.
   - Entering DFU mode allows you to connect and communicate with the STM32 at a low level, which is independent of any potentially problematic code in flash memory.
   - This mode enabled Windows to recognize the device as a DFU device and communicate with it for firmware loading or recovery.

With DFU mode working, you can now use STM32 tools (like STM32CubeProgrammer or DfuSe) to flash new firmware or troubleshoot further. Once your firmware is correctly loaded, you can return **BOOT0 to 0** to boot normally.